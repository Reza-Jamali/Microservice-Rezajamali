// <auto-generated />
using System;
using Cartax.Presentation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cartax.Presentation.Migrations
{
    [DbContext(typeof(CarTaxContext))]
    [Migration("20230925012206_VBN")]
    partial class VBN
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cartax.Domain.Entites.Areas.Area", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.CarTypes.CarType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTaxActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CarType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarName = "Normal",
                            IsActive = true,
                            IsTaxActive = true
                        },
                        new
                        {
                            Id = 2,
                            CarName = "Busses",
                            IsActive = true,
                            IsTaxActive = false
                        },
                        new
                        {
                            Id = 3,
                            CarName = "...",
                            IsActive = true,
                            IsTaxActive = false
                        },
                        new
                        {
                            Id = 4,
                            CarName = "Diplomat",
                            IsActive = true,
                            IsTaxActive = false
                        },
                        new
                        {
                            Id = 5,
                            CarName = "Motorcycles",
                            IsActive = true,
                            IsTaxActive = false
                        },
                        new
                        {
                            Id = 6,
                            CarName = "Military",
                            IsActive = true,
                            IsTaxActive = false
                        },
                        new
                        {
                            Id = 7,
                            CarName = "Foreign",
                            IsActive = true,
                            IsTaxActive = false
                        });
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Cars.Car", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarTypeId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Citys.City", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxCars.TaxCar", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Idcar")
                        .HasColumnType("int");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CarId");

                    b.ToTable("TaxCar", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLimitDays.TaxLimitDay", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TaxLimitDay");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLimitMoneyDays.TaxLimitMoneyDay", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("TaxLimitMoneyDay", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLimitTimes.TaxLimitTime", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("TaxLimitTime", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLongTerms.TaxTaxLongTerm", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DayStart")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxTaxLongTerm", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxPublicholidays.TaxPublicholiday", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("Date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxPublicholiday", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxTimes.TaxTime", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndDate")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartDate")
                        .HasColumnType("time");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("TaxTime", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxWeekDays.TaxWeekDay", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DatyTyps")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TaxDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxWeekDay", (string)null);
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Areas.Area", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Citys.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Cars.Car", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.CarTypes.CarType", "CarType")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxCars.TaxCar", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Areas.Area", "Area")
                        .WithMany("TaxCars")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cartax.Domain.Entites.Cars.Car", "Car")
                        .WithMany("TaxCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLimitDays.TaxLimitDay", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Citys.City", "City")
                        .WithOne("TaxLimitDay")
                        .HasForeignKey("Cartax.Domain.Entites.Tax.TaxLimitDays.TaxLimitDay", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLimitMoneyDays.TaxLimitMoneyDay", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Citys.City", "City")
                        .WithOne("TaxLimitMoneyDay")
                        .HasForeignKey("Cartax.Domain.Entites.Tax.TaxLimitMoneyDays.TaxLimitMoneyDay", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLimitTimes.TaxLimitTime", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Citys.City", "City")
                        .WithOne("TaxLimitTime")
                        .HasForeignKey("Cartax.Domain.Entites.Tax.TaxLimitTimes.TaxLimitTime", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxLongTerms.TaxTaxLongTerm", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Citys.City", "City")
                        .WithMany("TaxTaxLongTerm")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxPublicholidays.TaxPublicholiday", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Citys.City", "City")
                        .WithMany("TaxPublicholiday")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxTimes.TaxTime", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Areas.Area", "Area")
                        .WithMany("TaxTime")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Tax.TaxWeekDays.TaxWeekDay", b =>
                {
                    b.HasOne("Cartax.Domain.Entites.Citys.City", "City")
                        .WithMany("TaxWeekDay")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Areas.Area", b =>
                {
                    b.Navigation("TaxCars");

                    b.Navigation("TaxTime");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.CarTypes.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Cars.Car", b =>
                {
                    b.Navigation("TaxCars");
                });

            modelBuilder.Entity("Cartax.Domain.Entites.Citys.City", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("TaxLimitDay");

                    b.Navigation("TaxLimitMoneyDay");

                    b.Navigation("TaxLimitTime");

                    b.Navigation("TaxPublicholiday");

                    b.Navigation("TaxTaxLongTerm");

                    b.Navigation("TaxWeekDay");
                });
#pragma warning restore 612, 618
        }
    }
}
