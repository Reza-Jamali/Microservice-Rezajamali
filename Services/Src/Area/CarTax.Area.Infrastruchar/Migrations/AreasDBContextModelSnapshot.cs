// <auto-generated />
using System;
using CarTax.Area.Infrastruchar;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarTax.Area.Infrastruchar.Migrations
{
    [DbContext(typeof(AreasDBContext))]
    partial class AreasDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarTax.Area.Domain.Areas", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Maximumdailytaxamount")
                        .HasColumnType("decimal(18,02)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("limitedMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("AreaId");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("CarTax.Area.Domain.Entity.Specifichourlytax", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("SpecifichourlytaxId");

                    b.HasIndex("AreaId");

                    b.ToTable("Specifichourlytax", (string)null);
                });

            modelBuilder.Entity("CarTax.Area.Domain.Entity.Taxfreecar", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("TaxfreecarId");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TypeCarId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("TaxfreecarId");

                    b.HasIndex("AreaId");

                    b.ToTable("Taxfreecar", (string)null);
                });

            modelBuilder.Entity("CarTax.Area.Domain.Entity.Specifichourlytax", b =>
                {
                    b.HasOne("CarTax.Area.Domain.Areas", null)
                        .WithMany("Specifichourlytaxes")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("CarTax.Area.Domain.Entity.Specifichourly", "Specifichourly", b1 =>
                        {
                            b1.Property<int>("SpecifichourlytaxId")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("EndTimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("EndTimeSpan");

                            b1.Property<TimeSpan>("StartTimeSpan")
                                .HasColumnType("time")
                                .HasColumnName("StartTimeSpan");

                            b1.HasKey("SpecifichourlytaxId");

                            b1.ToTable("Specifichourlytax");

                            b1.WithOwner()
                                .HasForeignKey("SpecifichourlytaxId");
                        });

                    b.Navigation("Specifichourly")
                        .IsRequired();
                });

            modelBuilder.Entity("CarTax.Area.Domain.Entity.Taxfreecar", b =>
                {
                    b.HasOne("CarTax.Area.Domain.Areas", null)
                        .WithMany("Taxfreecar")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("CarTax.Area.Domain.Areas", b =>
                {
                    b.Navigation("Specifichourlytaxes");

                    b.Navigation("Taxfreecar");
                });
#pragma warning restore 612, 618
        }
    }
}
